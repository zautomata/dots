# -*- mode: snippet -*-
# name: filter 
# key: filter 
# --
/*
  hackspree copyright BSD license

  HOW TO USE
  ----
  This filter snippet is the only unit for building software
  applications and utilities, may be used to create two kinds of
  POSIX complied executables:

  1) Domain-specific App:
  Must do its thing via pipelines, that include any number of general
  purpose utilities.

  Pipelines may include:
  - Data Converters e.g. `jq `
  - Datastore Commands e.g. `redis-cli set mykey myvalue`
  - Datastore Queries e.g. `redis-cli get mykey`
  - General Purpose Utitilies

  2) General Purpose Utility:
  Utilities are self-contained code artifacts, that may never do its
  thing via pipelines, however may aquire its needed data via STDIN
  from other unix utilities.

  does a specific refinment

  This filter snippet follows the recommendations of the
  'Pipe and Filter pattern from the book of Archiectural software
  patterns, by that it encapsulates its operations into the following
  functions:
  - refine();
  - transform();
  - enrich();
  This not only exhibits a desired readability quality of all produced
  code artifacts but also helps -enforces- better design practices.

  By limiting code-artifacts reuse to two levels, technical debt is
  to remain reasonablly under control.

  In the regular software engineering scenario, communication with
  a Client should involve discussing:
  - No. of Domain-specific Apps
  - No. of Pipelines in each Domain-specific App
  - No. of General Purpose Utilities
  - DateStorage e.g. Redis
  - Logging Policies

  LOGGING SEVERITY LEVELS
  ----
  0 Emergency     - emerg
  1 Alert         - alert
  2 Critical      - crit
  3 Error         - err
  4 Warning       - warning
  5 Notice        - notice
  6 Informational - info
  7 Debug         - debug

  INCODE DOCUMENTATION
  ---
  Each pipeline should be thoroughly documented specifiying the its
  filters, error handling, and the output.

  MANUAL PAGES
  ----
  see "man 7 mdoc" and "man 1 mandoc"
  ref: https://forums.freebsd.org/threads/13200/

  CODING STYLE9
  ----
  man style

  TODO
  ----
  - Write function prototypes
*/
/*
Copyrigh
  `man filter_snippet` for more details
  OpenBSD Style9
*/


/*
 * Copyright (c) 2017 Mohamed A. Fouad <zautomata@hackspree.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */



#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <err.h>
#include <getopt.h>
#include <syslog.h>

/* show usage */
static void usage(void);

/* enrich data by computing and adding information this function
   could be useful while implementing datastore utitlies */
int enrich(FILE, FILE);

/* refines data by concentrating or extracting information */
int refine(FILE, FILE);

/* transforms data by delivering the data in other representation */
int transform(FILE, FILE);


//main(char *mylist)
int
main()
{
	// usage();
	printf("utility snippet with enrich() called\n");
	//enrich();
	return 0;
}

static void
usage(void)
{
	extern char *__progname;
	(void)fprintf(stderr,
	    "usage: %s [-h] [-d] [-abf] [-c value] \n",
	    __progname);
	exit(1);
}

int
enrich()
{
        int c;
        printf("enrich data by computing ");
        printf("and adding information");
        openlog("exampleprog",
                LOG_CONS |
                LOG_PID |
                LOG_NDELAY,
                LOG_LOCAL1);
                switch (c) {
                case 'h':
                        printf("log");
                case '?':
                        printf("log");
                }

        return 0;
}
